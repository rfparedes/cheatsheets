[
{
  "id": "bash",
  "title": "Bash scripting",
  "url": "/bash",
  "category": "CLI",
  "keywords": ["Variables","Functions","Interpolation","Brace expansions","Loops","Conditional execution","Command substitution"],
  "content_html": "<h2 class=\"-three-column\" id=\"getting-started\">Getting started</h2>\n\n<h3 class=\"-intro\" id=\"introduction\">Introduction</h3>\n\n<p>This is a quick reference to getting started with Bash scripting.</p>\n\n<ul>\n  <li><a href=\"https://learnxinyminutes.com/docs/bash/\">Learn bash in y minutes</a> <em>(learnxinyminutes.com)</em></li>\n  <li><a href=\"http://mywiki.wooledge.org/BashGuide\">Bash Guide</a> <em>(mywiki.wooledge.org)</em></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\nNAME=\"John\"\necho \"Hello $NAME!\"\n</code></pre>\n\n<h3 id=\"variables\">Variables</h3>\n\n<pre><code class=\"language-bash\">NAME=\"John\"\necho $NAME\necho \"$NAME\"\necho \"${NAME}!\"\n</code></pre>\n\n<h3 id=\"string-quotes\">String quotes</h3>\n\n<pre><code class=\"language-bash\">NAME=\"John\"\necho \"Hi $NAME\"  #=&gt; Hi John\necho 'Hi $NAME'  #=&gt; Hi $NAME\n</code></pre>\n\n<h3 id=\"shell-execution\">Shell execution</h3>\n\n<pre><code class=\"language-bash\">echo \"I'm in $(pwd)\"\necho \"I'm in `pwd`\"\n# Same\n</code></pre>\n\n<p>See <a href=\"http://wiki.bash-hackers.org/syntax/expansion/cmdsubst\">Command substitution</a></p>\n\n<h3 id=\"conditional-execution\">Conditional execution</h3>\n\n<pre><code class=\"language-bash\">git commit &amp;&amp; git push\ngit commit || echo \"Commit failed\"\n</code></pre>\n\n<h3 id=\"functions-example\">Functions</h3>\n\n<pre><code class=\"language-bash\">get_name() {\n  echo \"John\"\n}\n\necho \"You are $(get_name)\"\n</code></pre>\n\n<p>See: <a href=\"#functions\">Functions</a></p>\n\n<h3 id=\"conditionals-example\">Conditionals</h3>\n\n<pre><code class=\"language-bash\">if [[ -z \"$string\" ]]; then\n  echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n  echo \"String is not empty\"\nfi\n</code></pre>\n\n<p>See: <a href=\"#conditionals\">Conditionals</a></p>\n\n<h3 id=\"strict-mode\">Strict mode</h3>\n\n<pre><code class=\"language-bash\">set -euo pipefail\nIFS=$'\\n\\t'\n</code></pre>\n\n<p>See: <a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\">Unofficial bash strict mode</a></p>\n\n<h3 id=\"brace-expansion\">Brace expansion</h3>\n\n<pre><code class=\"language-bash\">echo {A,B}.js\n</code></pre>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>{A,B}</code></td>\n      <td>Same as <code>A B</code></td>\n    </tr>\n    <tr>\n      <td><code>{A,B}.js</code></td>\n      <td>Same as <code>A.js B.js</code></td>\n    </tr>\n    <tr>\n      <td><code>{1..5}</code></td>\n      <td>Same as <code>1 2 3 4 5</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"http://wiki.bash-hackers.org/syntax/expansion/brace\">Brace expansion</a></p>\n\n<h2 class=\"-three-column\" id=\"parameter-expansions\">Parameter expansions</h2>\n\n<h3 id=\"basics\">Basics</h3>\n\n<pre><code class=\"language-bash\">name=\"John\"\necho ${name}\necho ${name/J/j}    #=&gt; \"john\" (substitution)\necho ${name:0:2}    #=&gt; \"Jo\" (slicing)\necho ${name::2}     #=&gt; \"Jo\" (slicing)\necho ${name::-1}    #=&gt; \"Joh\" (slicing)\necho ${name:(-1)}   #=&gt; \"n\" (slicing from right)\necho ${name:(-2):1} #=&gt; \"h\" (slicing from right)\necho ${food:-Cake}  #=&gt; $food or \"Cake\"\n</code></pre>\n\n<pre><code class=\"language-bash\">length=2\necho ${name:0:length}  #=&gt; \"Jo\"\n</code></pre>\n\n<p>See: <a href=\"http://wiki.bash-hackers.org/syntax/pe\">Parameter expansion</a></p>\n\n<pre><code class=\"language-bash\">STR=\"/path/to/foo.cpp\"\necho ${STR%.cpp}    # /path/to/foo\necho ${STR%.cpp}.o  # /path/to/foo.o\necho ${STR%/*}      # /path/to\n\necho ${STR##*.}     # cpp (extension)\necho ${STR##*/}     # foo.cpp (basepath)\n\necho ${STR#*/}      # path/to/foo.cpp\necho ${STR##*/}     # foo.cpp\n\necho ${STR/foo/bar} # /path/to/bar.cpp\n</code></pre>\n\n<pre><code class=\"language-bash\">STR=\"Hello world\"\necho ${STR:6:5}   # \"world\"\necho ${STR: -5:5}  # \"world\"\n</code></pre>\n\n<pre><code class=\"language-bash\">SRC=\"/path/to/foo.cpp\"\nBASE=${SRC##*/}   #=&gt; \"foo.cpp\" (basepath)\nDIR=${SRC%$BASE}  #=&gt; \"/path/to/\" (dirpath)\n</code></pre>\n\n<h3 id=\"substitution\">Substitution</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Code</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${FOO%suffix}</code></td>\n      <td>Remove suffix</td>\n    </tr>\n    <tr>\n      <td><code>${FOO#prefix}</code></td>\n      <td>Remove prefix</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>${FOO%%suffix}</code></td>\n      <td>Remove long suffix</td>\n    </tr>\n    <tr>\n      <td><code>${FOO##prefix}</code></td>\n      <td>Remove long prefix</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>${FOO/from/to}</code></td>\n      <td>Replace first match</td>\n    </tr>\n    <tr>\n      <td><code>${FOO//from/to}</code></td>\n      <td>Replace all</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>${FOO/%from/to}</code></td>\n      <td>Replace suffix</td>\n    </tr>\n    <tr>\n      <td><code>${FOO/#from/to}</code></td>\n      <td>Replace prefix</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"comments\">Comments</h3>\n\n<pre><code class=\"language-bash\"># Single line comment\n</code></pre>\n\n<pre><code class=\"language-bash\">: '\nThis is a\nmulti line\ncomment\n'\n</code></pre>\n\n<h3 id=\"substrings\">Substrings</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${FOO:0:3}</code></td>\n      <td>Substring <em>(position, length)</em></td>\n    </tr>\n    <tr>\n      <td><code>${FOO:(-3):3}</code></td>\n      <td>Substring from the right</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"length\">Length</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${#FOO}</code></td>\n      <td>Length of <code>$FOO</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"manipulation\">Manipulation</h3>\n\n<pre><code class=\"language-bash\">STR=\"HELLO WORLD!\"\necho ${STR,}   #=&gt; \"hELLO WORLD!\" (lowercase 1st letter)\necho ${STR,,}  #=&gt; \"hello world!\" (all lowercase)\n\nSTR=\"hello world!\"\necho ${STR^}   #=&gt; \"Hello world!\" (uppercase 1st letter)\necho ${STR^^}  #=&gt; \"HELLO WORLD!\" (all uppercase)\n</code></pre>\n\n<h3 id=\"default-values\">Default values</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${FOO:-val}</code></td>\n      <td><code>$FOO</code>, or <code>val</code> if unset (or null)</td>\n    </tr>\n    <tr>\n      <td><code>${FOO:=val}</code></td>\n      <td>Set <code>$FOO</code> to <code>val</code> if unset (or null)</td>\n    </tr>\n    <tr>\n      <td><code>${FOO:+val}</code></td>\n      <td><code>val</code> if <code>$FOO</code> is set (and not null)</td>\n    </tr>\n    <tr>\n      <td><code>${FOO:?message}</code></td>\n      <td>Show error message and exit if <code>$FOO</code> is unset (or null)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Omitting the <code>:</code> removes the (non)nullity checks, e.g. <code>${FOO-val}</code> expands to <code>val</code> if unset otherwise <code>$FOO</code>.</p>\n\n<h2 class=\"-three-column\" id=\"loops\">Loops</h2>\n\n<h3 id=\"basic-for-loop\">Basic for loop</h3>\n\n<pre><code class=\"language-bash\">for i in /etc/rc.*; do\n  echo $i\ndone\n</code></pre>\n\n<h3 id=\"c-like-for-loop\">C-like for loop</h3>\n\n<pre><code class=\"language-bash\">for ((i = 0 ; i &lt; 100 ; i++)); do\n  echo $i\ndone\n</code></pre>\n\n<h3 id=\"ranges\">Ranges</h3>\n\n<pre><code class=\"language-bash\">for i in {1..5}; do\n    echo \"Welcome $i\"\ndone\n</code></pre>\n\n<h4 id=\"with-step-size\">With step size</h4>\n\n<pre><code class=\"language-bash\">for i in {5..50..5}; do\n    echo \"Welcome $i\"\ndone\n</code></pre>\n\n<h3 id=\"reading-lines\">Reading lines</h3>\n\n<pre><code class=\"language-bash\">cat file.txt | while read line; do\n  echo $line\ndone\n</code></pre>\n\n<h3 id=\"forever\">Forever</h3>\n\n<pre><code class=\"language-bash\">while true; do\n  ···\ndone\n</code></pre>\n\n<h2 class=\"-three-column\" id=\"functions\">Functions</h2>\n\n<h3 id=\"defining-functions\">Defining functions</h3>\n\n<pre><code class=\"language-bash\">myfunc() {\n    echo \"hello $1\"\n}\n</code></pre>\n\n<pre><code class=\"language-bash\"># Same as above (alternate syntax)\nfunction myfunc() {\n    echo \"hello $1\"\n}\n</code></pre>\n\n<pre><code class=\"language-bash\">myfunc \"John\"\n</code></pre>\n\n<h3 id=\"returning-values\">Returning values</h3>\n\n<pre><code class=\"language-bash\">myfunc() {\n    local myresult='some value'\n    echo $myresult\n}\n</code></pre>\n\n<pre><code class=\"language-bash\">result=\"$(myfunc)\"\n</code></pre>\n\n<h3 id=\"raising-errors\">Raising errors</h3>\n\n<pre><code class=\"language-bash\">myfunc() {\n  return 1\n}\n</code></pre>\n\n<pre><code class=\"language-bash\">if myfunc; then\n  echo \"success\"\nelse\n  echo \"failure\"\nfi\n</code></pre>\n\n<h3 id=\"arguments\">Arguments</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>$#</code></td>\n      <td>Number of arguments</td>\n    </tr>\n    <tr>\n      <td><code>$*</code></td>\n      <td>All arguments</td>\n    </tr>\n    <tr>\n      <td><code>$@</code></td>\n      <td>All arguments, starting from first</td>\n    </tr>\n    <tr>\n      <td><code>$1</code></td>\n      <td>First argument</td>\n    </tr>\n    <tr>\n      <td><code>$_</code></td>\n      <td>Last argument of the previous command</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See <a href=\"http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables\">Special parameters</a>.</p>\n\n<h2 class=\"-three-column\" id=\"conditionals\">Conditionals</h2>\n\n<h3 id=\"conditions\">Conditions</h3>\n\n<p>Note that <code>[[</code> is actually a command/program that returns either <code>0</code> (true) or <code>1</code> (false). Any program that obeys the same logic (like all base utils, such as <code>grep(1)</code> or <code>ping(1)</code>) can be used as condition, see examples.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Condition</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>[[ -z STRING ]]</code></td>\n      <td>Empty string</td>\n    </tr>\n    <tr>\n      <td><code>[[ -n STRING ]]</code></td>\n      <td>Not empty string</td>\n    </tr>\n    <tr>\n      <td><code>[[ STRING == STRING ]]</code></td>\n      <td>Equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ STRING != STRING ]]</code></td>\n      <td>Not Equal</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ NUM -eq NUM ]]</code></td>\n      <td>Equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -ne NUM ]]</code></td>\n      <td>Not equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -lt NUM ]]</code></td>\n      <td>Less than</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -le NUM ]]</code></td>\n      <td>Less than or equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -gt NUM ]]</code></td>\n      <td>Greater than</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -ge NUM ]]</code></td>\n      <td>Greater than or equal</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ STRING =~ STRING ]]</code></td>\n      <td>Regexp</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>(( NUM &lt; NUM ))</code></td>\n      <td>Numeric conditions</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"more-conditions\">More conditions</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th>Condition</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>[[ -o noclobber ]]</code></td>\n      <td>If OPTIONNAME is enabled</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ ! EXPR ]]</code></td>\n      <td>Not</td>\n    </tr>\n    <tr>\n      <td><code>[[ X &amp;&amp; Y ]]</code></td>\n      <td>And</td>\n    </tr>\n    <tr>\n      <td><code>[[ X || Y ]]</code></td>\n      <td>Or</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"file-conditions\">File conditions</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Condition</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>[[ -e FILE ]]</code></td>\n      <td>Exists</td>\n    </tr>\n    <tr>\n      <td><code>[[ -r FILE ]]</code></td>\n      <td>Readable</td>\n    </tr>\n    <tr>\n      <td><code>[[ -h FILE ]]</code></td>\n      <td>Symlink</td>\n    </tr>\n    <tr>\n      <td><code>[[ -d FILE ]]</code></td>\n      <td>Directory</td>\n    </tr>\n    <tr>\n      <td><code>[[ -w FILE ]]</code></td>\n      <td>Writable</td>\n    </tr>\n    <tr>\n      <td><code>[[ -s FILE ]]</code></td>\n      <td>Size is &gt; 0 bytes</td>\n    </tr>\n    <tr>\n      <td><code>[[ -f FILE ]]</code></td>\n      <td>File</td>\n    </tr>\n    <tr>\n      <td><code>[[ -x FILE ]]</code></td>\n      <td>Executable</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ FILE1 -nt FILE2 ]]</code></td>\n      <td>1 is more recent than 2</td>\n    </tr>\n    <tr>\n      <td><code>[[ FILE1 -ot FILE2 ]]</code></td>\n      <td>2 is more recent than 1</td>\n    </tr>\n    <tr>\n      <td><code>[[ FILE1 -ef FILE2 ]]</code></td>\n      <td>Same files</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"example-1\">Example</h3>\n\n<pre><code class=\"language-bash\"># String\nif [[ -z \"$string\" ]]; then\n  echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n  echo \"String is not empty\"\nelse\n  echo \"This never happens\"\nfi\n</code></pre>\n\n<pre><code class=\"language-bash\"># Combinations\nif [[ X &amp;&amp; Y ]]; then\n  ...\nfi\n</code></pre>\n\n<pre><code class=\"language-bash\"># Equal\nif [[ \"$A\" == \"$B\" ]]\n</code></pre>\n\n<pre><code class=\"language-bash\"># Regex\nif [[ \"A\" =~ . ]]\n</code></pre>\n\n<pre><code class=\"language-bash\">if (( $a &lt; $b )); then\n   echo \"$a is smaller than $b\"\nfi\n</code></pre>\n\n<pre><code class=\"language-bash\">if [[ -e \"file.txt\" ]]; then\n  echo \"file exists\"\nfi\n</code></pre>\n\n<h2 id=\"arrays\">Arrays</h2>\n\n<h3 id=\"defining-arrays\">Defining arrays</h3>\n\n<pre><code class=\"language-bash\">Fruits=('Apple' 'Banana' 'Orange')\n</code></pre>\n\n<pre><code class=\"language-bash\">Fruits[0]=\"Apple\"\nFruits[1]=\"Banana\"\nFruits[2]=\"Orange\"\n</code></pre>\n\n<h3 id=\"working-with-arrays\">Working with arrays</h3>\n\n<pre><code class=\"language-bash\">echo ${Fruits[0]}           # Element #0\necho ${Fruits[-1]}          # Last element\necho ${Fruits[@]}           # All elements, space-separated\necho ${#Fruits[@]}          # Number of elements\necho ${#Fruits}             # String length of the 1st element\necho ${#Fruits[3]}          # String length of the Nth element\necho ${Fruits[@]:3:2}       # Range (from position 3, length 2)\necho ${!Fruits[@]}          # Keys of all elements, space-separated\n</code></pre>\n\n<h3 id=\"operations\">Operations</h3>\n\n<pre><code class=\"language-bash\">Fruits=(\"${Fruits[@]}\" \"Watermelon\")    # Push\nFruits+=('Watermelon')                  # Also Push\nFruits=( ${Fruits[@]/Ap*/} )            # Remove by regex match\nunset Fruits[2]                         # Remove one item\nFruits=(\"${Fruits[@]}\")                 # Duplicate\nFruits=(\"${Fruits[@]}\" \"${Veggies[@]}\") # Concatenate\nlines=(`cat \"logfile\"`)                 # Read from file\n</code></pre>\n\n<h3 id=\"iteration\">Iteration</h3>\n\n<pre><code class=\"language-bash\">for i in \"${arrayName[@]}\"; do\n  echo $i\ndone\n</code></pre>\n\n<h2 class=\"-three-column\" id=\"dictionaries\">Dictionaries</h2>\n\n<h3 id=\"defining\">Defining</h3>\n\n<pre><code class=\"language-bash\">declare -A sounds\n</code></pre>\n\n<pre><code class=\"language-bash\">sounds[dog]=\"bark\"\nsounds[cow]=\"moo\"\nsounds[bird]=\"tweet\"\nsounds[wolf]=\"howl\"\n</code></pre>\n\n<p>Declares <code>sound</code> as a Dictionary object (aka associative array).</p>\n\n<h3 id=\"working-with-dictionaries\">Working with dictionaries</h3>\n\n<pre><code class=\"language-bash\">echo ${sounds[dog]} # Dog's sound\necho ${sounds[@]}   # All values\necho ${!sounds[@]}  # All keys\necho ${#sounds[@]}  # Number of elements\nunset sounds[dog]   # Delete dog\n</code></pre>\n\n<h3 id=\"iteration-1\">Iteration</h3>\n\n<h4 id=\"iterate-over-values\">Iterate over values</h4>\n\n<pre><code class=\"language-bash\">for val in \"${sounds[@]}\"; do\n  echo $val\ndone\n</code></pre>\n\n<h4 id=\"iterate-over-keys\">Iterate over keys</h4>\n\n<pre><code class=\"language-bash\">for key in \"${!sounds[@]}\"; do\n  echo $key\ndone\n</code></pre>\n\n<h2 id=\"options\">Options</h2>\n\n<h3 id=\"options-1\">Options</h3>\n\n<pre><code class=\"language-bash\">set -o noclobber  # Avoid overlay files (echo \"hi\" &gt; foo)\nset -o errexit    # Used to exit upon error, avoiding cascading errors\nset -o pipefail   # Unveils hidden failures\nset -o nounset    # Exposes unset variables\n</code></pre>\n\n<h3 id=\"glob-options\">Glob options</h3>\n\n<pre><code class=\"language-bash\">shopt -s nullglob    # Non-matching globs are removed  ('*.foo' =&gt; '')\nshopt -s failglob    # Non-matching globs throw errors\nshopt -s nocaseglob  # Case insensitive globs\nshopt -s dotglob     # Wildcards match dotfiles (\"*.sh\" =&gt; \".foo.sh\")\nshopt -s globstar    # Allow ** for recursive matches ('lib/**/*.rb' =&gt; 'lib/a/b/c.rb')\n</code></pre>\n\n<p>Set <code>GLOBIGNORE</code> as a colon-separated list of patterns to be removed from glob\nmatches.</p>\n\n<h2 id=\"history\">History</h2>\n\n<h3 id=\"commands\">Commands</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>history</code></td>\n      <td>Show history</td>\n    </tr>\n    <tr>\n      <td><code>shopt -s histverify</code></td>\n      <td>Don’t execute expanded result immediately</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"expansions\">Expansions</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>!$</code></td>\n      <td>Expand last parameter of most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!*</code></td>\n      <td>Expand all parameters of most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!-n</code></td>\n      <td>Expand <code>n</code>th most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!n</code></td>\n      <td>Expand <code>n</code>th command in history</td>\n    </tr>\n    <tr>\n      <td><code>!&lt;command&gt;</code></td>\n      <td>Expand most recent invocation of command <code>&lt;command&gt;</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"operations-1\">Operations</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Code</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>!!</code></td>\n      <td>Execute last command again</td>\n    </tr>\n    <tr>\n      <td><code>!!:s/&lt;FROM&gt;/&lt;TO&gt;/</code></td>\n      <td>Replace first occurrence of <code>&lt;FROM&gt;</code> to <code>&lt;TO&gt;</code> in most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!!:gs/&lt;FROM&gt;/&lt;TO&gt;/</code></td>\n      <td>Replace all occurrences of <code>&lt;FROM&gt;</code> to <code>&lt;TO&gt;</code> in most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!$:t</code></td>\n      <td>Expand only basename from last parameter of most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!$:h</code></td>\n      <td>Expand only directory from last parameter of most recent command</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code>!!</code> and <code>!$</code> can be replaced with any valid expansion.</p>\n\n<h3 id=\"slices\">Slices</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Code</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>!!:n</code></td>\n      <td>Expand only <code>n</code>th token from most recent command (command is <code>0</code>; first argument is <code>1</code>)</td>\n    </tr>\n    <tr>\n      <td><code>!^</code></td>\n      <td>Expand first argument from most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!$</code></td>\n      <td>Expand last token from most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!!:n-m</code></td>\n      <td>Expand range of tokens from most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!!:n-$</code></td>\n      <td>Expand <code>n</code>th token to last from most recent command</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code>!!</code> can be replaced with any valid expansion i.e. <code>!cat</code>, <code>!-2</code>, <code>!42</code>, etc.</p>\n\n<h2 id=\"miscellaneous\">Miscellaneous</h2>\n\n<h3 id=\"numeric-calculations\">Numeric calculations</h3>\n\n<pre><code class=\"language-bash\">$((a + 200))      # Add 200 to $a\n</code></pre>\n\n<pre><code class=\"language-bash\">$(($RANDOM%200))  # Random number 0..199\n</code></pre>\n\n<h3 id=\"subshells\">Subshells</h3>\n\n<pre><code class=\"language-bash\">(cd somedir; echo \"I'm now in $PWD\")\npwd # still in first directory\n</code></pre>\n\n<h3 id=\"redirection\">Redirection</h3>\n\n<pre><code class=\"language-bash\">python hello.py &gt; output.txt   # stdout to (file)\npython hello.py &gt;&gt; output.txt  # stdout to (file), append\npython hello.py 2&gt; error.log   # stderr to (file)\npython hello.py 2&gt;&amp;1           # stderr to stdout\npython hello.py 2&gt;/dev/null    # stderr to (null)\npython hello.py &amp;&gt;/dev/null    # stdout and stderr to (null)\n</code></pre>\n\n<pre><code class=\"language-bash\">python hello.py &lt; foo.txt      # feed foo.txt to stdin for python\n</code></pre>\n\n<h3 id=\"inspecting-commands\">Inspecting commands</h3>\n\n<pre><code class=\"language-bash\">command -V cd\n#=&gt; \"cd is a function/alias/whatever\"\n</code></pre>\n\n<h3 id=\"trap-errors\">Trap errors</h3>\n\n<pre><code class=\"language-bash\">trap 'echo Error at about $LINENO' ERR\n</code></pre>\n\n<p>or</p>\n\n<pre><code class=\"language-bash\">traperr() {\n  echo \"ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}\"\n}\n\nset -o errtrace\ntrap traperr ERR\n</code></pre>\n\n<h3 id=\"caseswitch\">Case/switch</h3>\n\n<pre><code class=\"language-bash\">case \"$1\" in\n  start | up)\n    vagrant up\n    ;;\n\n  *)\n    echo \"Usage: $0 {start|stop|ssh}\"\n    ;;\nesac\n</code></pre>\n\n<h3 id=\"source-relative\">Source relative</h3>\n\n<pre><code class=\"language-bash\">source \"${0%/*}/../share/foo.sh\"\n</code></pre>\n\n<h3 id=\"printf\">printf</h3>\n\n<pre><code class=\"language-bash\">printf \"Hello %s, I'm %s\" Sven Olga\n#=&gt; \"Hello Sven, I'm Olga\n\nprintf \"1 + 1 = %d\" 2\n#=&gt; \"1 + 1 = 2\"\n\nprintf \"This is how you print a float: %f\" 2\n#=&gt; \"This is how you print a float: 2.000000\"\n</code></pre>\n\n<h3 id=\"directory-of-script\">Directory of script</h3>\n\n<pre><code class=\"language-bash\">DIR=\"${0%/*}\"\n</code></pre>\n\n<h3 id=\"getting-options\">Getting options</h3>\n\n<pre><code class=\"language-bash\">while [[ \"$1\" =~ ^- &amp;&amp; ! \"$1\" == \"--\" ]]; do case $1 in\n  -V | --version )\n    echo $version\n    exit\n    ;;\n  -s | --string )\n    shift; string=$1\n    ;;\n  -f | --flag )\n    flag=1\n    ;;\nesac; shift; done\nif [[ \"$1\" == '--' ]]; then shift; fi\n</code></pre>\n\n<h3 id=\"heredoc\">Heredoc</h3>\n\n<pre><code class=\"language-sh\">cat &lt;&lt;END\nhello world\nEND\n</code></pre>\n\n<h3 id=\"reading-input\">Reading input</h3>\n\n<pre><code class=\"language-bash\">echo -n \"Proceed? [y/n]: \"\nread ans\necho $ans\n</code></pre>\n\n<pre><code class=\"language-bash\">read -n 1 ans    # Just one character\n</code></pre>\n\n<h3 id=\"special-variables\">Special variables</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>$?</code></td>\n      <td>Exit status of last task</td>\n    </tr>\n    <tr>\n      <td><code>$!</code></td>\n      <td>PID of last background task</td>\n    </tr>\n    <tr>\n      <td><code>$$</code></td>\n      <td>PID of shell</td>\n    </tr>\n    <tr>\n      <td><code>$0</code></td>\n      <td>Filename of the shell script</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See <a href=\"http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables\">Special parameters</a>.</p>\n\n<h3 id=\"go-to-previous-directory\">Go to previous directory</h3>\n\n<pre><code class=\"language-bash\">pwd # /home/user/foo\ncd bar/\npwd # /home/user/foo/bar\ncd -\npwd # /home/user/foo\n</code></pre>\n\n<h3 id=\"check-for-commands-result\">Check for command’s result</h3>\n\n<pre><code class=\"language-bash\">if ping -c 1 google.com; then\n  echo \"It appears you have a working internet connection\"\nfi\n</code></pre>\n\n<h3 id=\"grep-check\">Grep check</h3>\n\n<pre><code class=\"language-bash\">if grep -q 'foo' ~/.bash_history; then\n  echo \"You appear to have typed 'foo' in the past\"\nfi\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"http://wiki.bash-hackers.org/\">Bash-hackers wiki</a> <em>(bash-hackers.org)</em></li>\n  <li><a href=\"http://wiki.bash-hackers.org/syntax/shellvars\">Shell vars</a> <em>(bash-hackers.org)</em></li>\n  <li><a href=\"https://learnxinyminutes.com/docs/bash/\">Learn bash in y minutes</a> <em>(learnxinyminutes.com)</em></li>\n  <li><a href=\"http://mywiki.wooledge.org/BashGuide\">Bash Guide</a> <em>(mywiki.wooledge.org)</em></li>\n  <li><a href=\"https://www.shellcheck.net/\">ShellCheck</a> <em>(shellcheck.net)</em></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2020-07-05"
},{
  "id": "SLES-SAP/hana-scale-out-replication",
  "title": "HANA Scale-out Replication",
  "url": "/SLES-SAP/hana-scale-out-replication",
  "category": "SLES-SAP",
  "keywords": null,
  "content_html": "<h2 class=\"-three-column\" id=\"getting-started\">Getting started</h2>\n\n<h3 class=\"-intro\" id=\"introduction\">Introduction</h3>\n\n<p>This is a quick reference to getting started with Bash scripting.</p>\n\n<ul>\n  <li><a href=\"https://learnxinyminutes.com/docs/bash/\">Learn bash in y minutes</a> <em>(learnxinyminutes.com)</em></li>\n  <li><a href=\"http://mywiki.wooledge.org/BashGuide\">Bash Guide</a> <em>(mywiki.wooledge.org)</em></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\nNAME=\"John\"\necho \"Hello $NAME!\"\n</code></pre>\n\n<h3 id=\"variables\">Variables</h3>\n\n<pre><code class=\"language-bash\">NAME=\"John\"\necho $NAME\necho \"$NAME\"\necho \"${NAME}!\"\n</code></pre>\n\n<h3 id=\"string-quotes\">String quotes</h3>\n\n<pre><code class=\"language-bash\">NAME=\"John\"\necho \"Hi $NAME\"  #=&gt; Hi John\necho 'Hi $NAME'  #=&gt; Hi $NAME\n</code></pre>\n\n<h3 id=\"shell-execution\">Shell execution</h3>\n\n<pre><code class=\"language-bash\">echo \"I'm in $(pwd)\"\necho \"I'm in `pwd`\"\n# Same\n</code></pre>\n\n<p>See <a href=\"http://wiki.bash-hackers.org/syntax/expansion/cmdsubst\">Command substitution</a></p>\n\n<h3 id=\"conditional-execution\">Conditional execution</h3>\n\n<pre><code class=\"language-bash\">git commit &amp;&amp; git push\ngit commit || echo \"Commit failed\"\n</code></pre>\n\n<h3 id=\"functions-example\">Functions</h3>\n\n<pre><code class=\"language-bash\">get_name() {\n  echo \"John\"\n}\n\necho \"You are $(get_name)\"\n</code></pre>\n\n<p>See: <a href=\"#functions\">Functions</a></p>\n\n<h3 id=\"conditionals-example\">Conditionals</h3>\n\n<pre><code class=\"language-bash\">if [[ -z \"$string\" ]]; then\n  echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n  echo \"String is not empty\"\nfi\n</code></pre>\n\n<p>See: <a href=\"#conditionals\">Conditionals</a></p>\n\n<h3 id=\"strict-mode\">Strict mode</h3>\n\n<pre><code class=\"language-bash\">set -euo pipefail\nIFS=$'\\n\\t'\n</code></pre>\n\n<p>See: <a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\">Unofficial bash strict mode</a></p>\n\n<h3 id=\"brace-expansion\">Brace expansion</h3>\n\n<pre><code class=\"language-bash\">echo {A,B}.js\n</code></pre>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>{A,B}</code></td>\n      <td>Same as <code>A B</code></td>\n    </tr>\n    <tr>\n      <td><code>{A,B}.js</code></td>\n      <td>Same as <code>A.js B.js</code></td>\n    </tr>\n    <tr>\n      <td><code>{1..5}</code></td>\n      <td>Same as <code>1 2 3 4 5</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"http://wiki.bash-hackers.org/syntax/expansion/brace\">Brace expansion</a></p>\n\n<h2 class=\"-three-column\" id=\"parameter-expansions\">Parameter expansions</h2>\n\n<h3 id=\"basics\">Basics</h3>\n\n<pre><code class=\"language-bash\">name=\"John\"\necho ${name}\necho ${name/J/j}    #=&gt; \"john\" (substitution)\necho ${name:0:2}    #=&gt; \"Jo\" (slicing)\necho ${name::2}     #=&gt; \"Jo\" (slicing)\necho ${name::-1}    #=&gt; \"Joh\" (slicing)\necho ${name:(-1)}   #=&gt; \"n\" (slicing from right)\necho ${name:(-2):1} #=&gt; \"h\" (slicing from right)\necho ${food:-Cake}  #=&gt; $food or \"Cake\"\n</code></pre>\n\n<pre><code class=\"language-bash\">length=2\necho ${name:0:length}  #=&gt; \"Jo\"\n</code></pre>\n\n<p>See: <a href=\"http://wiki.bash-hackers.org/syntax/pe\">Parameter expansion</a></p>\n\n<pre><code class=\"language-bash\">STR=\"/path/to/foo.cpp\"\necho ${STR%.cpp}    # /path/to/foo\necho ${STR%.cpp}.o  # /path/to/foo.o\necho ${STR%/*}      # /path/to\n\necho ${STR##*.}     # cpp (extension)\necho ${STR##*/}     # foo.cpp (basepath)\n\necho ${STR#*/}      # path/to/foo.cpp\necho ${STR##*/}     # foo.cpp\n\necho ${STR/foo/bar} # /path/to/bar.cpp\n</code></pre>\n\n<pre><code class=\"language-bash\">STR=\"Hello world\"\necho ${STR:6:5}   # \"world\"\necho ${STR: -5:5}  # \"world\"\n</code></pre>\n\n<pre><code class=\"language-bash\">SRC=\"/path/to/foo.cpp\"\nBASE=${SRC##*/}   #=&gt; \"foo.cpp\" (basepath)\nDIR=${SRC%$BASE}  #=&gt; \"/path/to/\" (dirpath)\n</code></pre>\n\n<h3 id=\"substitution\">Substitution</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Code</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${FOO%suffix}</code></td>\n      <td>Remove suffix</td>\n    </tr>\n    <tr>\n      <td><code>${FOO#prefix}</code></td>\n      <td>Remove prefix</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>${FOO%%suffix}</code></td>\n      <td>Remove long suffix</td>\n    </tr>\n    <tr>\n      <td><code>${FOO##prefix}</code></td>\n      <td>Remove long prefix</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>${FOO/from/to}</code></td>\n      <td>Replace first match</td>\n    </tr>\n    <tr>\n      <td><code>${FOO//from/to}</code></td>\n      <td>Replace all</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>${FOO/%from/to}</code></td>\n      <td>Replace suffix</td>\n    </tr>\n    <tr>\n      <td><code>${FOO/#from/to}</code></td>\n      <td>Replace prefix</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"comments\">Comments</h3>\n\n<pre><code class=\"language-bash\"># Single line comment\n</code></pre>\n\n<pre><code class=\"language-bash\">: '\nThis is a\nmulti line\ncomment\n'\n</code></pre>\n\n<h3 id=\"substrings\">Substrings</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${FOO:0:3}</code></td>\n      <td>Substring <em>(position, length)</em></td>\n    </tr>\n    <tr>\n      <td><code>${FOO:(-3):3}</code></td>\n      <td>Substring from the right</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"length\">Length</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${#FOO}</code></td>\n      <td>Length of <code>$FOO</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"manipulation\">Manipulation</h3>\n\n<pre><code class=\"language-bash\">STR=\"HELLO WORLD!\"\necho ${STR,}   #=&gt; \"hELLO WORLD!\" (lowercase 1st letter)\necho ${STR,,}  #=&gt; \"hello world!\" (all lowercase)\n\nSTR=\"hello world!\"\necho ${STR^}   #=&gt; \"Hello world!\" (uppercase 1st letter)\necho ${STR^^}  #=&gt; \"HELLO WORLD!\" (all uppercase)\n</code></pre>\n\n<h3 id=\"default-values\">Default values</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>${FOO:-val}</code></td>\n      <td><code>$FOO</code>, or <code>val</code> if unset (or null)</td>\n    </tr>\n    <tr>\n      <td><code>${FOO:=val}</code></td>\n      <td>Set <code>$FOO</code> to <code>val</code> if unset (or null)</td>\n    </tr>\n    <tr>\n      <td><code>${FOO:+val}</code></td>\n      <td><code>val</code> if <code>$FOO</code> is set (and not null)</td>\n    </tr>\n    <tr>\n      <td><code>${FOO:?message}</code></td>\n      <td>Show error message and exit if <code>$FOO</code> is unset (or null)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Omitting the <code>:</code> removes the (non)nullity checks, e.g. <code>${FOO-val}</code> expands to <code>val</code> if unset otherwise <code>$FOO</code>.</p>\n\n<h2 class=\"-three-column\" id=\"loops\">Loops</h2>\n\n<h3 id=\"basic-for-loop\">Basic for loop</h3>\n\n<pre><code class=\"language-bash\">for i in /etc/rc.*; do\n  echo $i\ndone\n</code></pre>\n\n<h3 id=\"c-like-for-loop\">C-like for loop</h3>\n\n<pre><code class=\"language-bash\">for ((i = 0 ; i &lt; 100 ; i++)); do\n  echo $i\ndone\n</code></pre>\n\n<h3 id=\"ranges\">Ranges</h3>\n\n<pre><code class=\"language-bash\">for i in {1..5}; do\n    echo \"Welcome $i\"\ndone\n</code></pre>\n\n<h4 id=\"with-step-size\">With step size</h4>\n\n<pre><code class=\"language-bash\">for i in {5..50..5}; do\n    echo \"Welcome $i\"\ndone\n</code></pre>\n\n<h3 id=\"reading-lines\">Reading lines</h3>\n\n<pre><code class=\"language-bash\">cat file.txt | while read line; do\n  echo $line\ndone\n</code></pre>\n\n<h3 id=\"forever\">Forever</h3>\n\n<pre><code class=\"language-bash\">while true; do\n  ···\ndone\n</code></pre>\n\n<h2 class=\"-three-column\" id=\"functions\">Functions</h2>\n\n<h3 id=\"defining-functions\">Defining functions</h3>\n\n<pre><code class=\"language-bash\">myfunc() {\n    echo \"hello $1\"\n}\n</code></pre>\n\n<pre><code class=\"language-bash\"># Same as above (alternate syntax)\nfunction myfunc() {\n    echo \"hello $1\"\n}\n</code></pre>\n\n<pre><code class=\"language-bash\">myfunc \"John\"\n</code></pre>\n\n<h3 id=\"returning-values\">Returning values</h3>\n\n<pre><code class=\"language-bash\">myfunc() {\n    local myresult='some value'\n    echo $myresult\n}\n</code></pre>\n\n<pre><code class=\"language-bash\">result=\"$(myfunc)\"\n</code></pre>\n\n<h3 id=\"raising-errors\">Raising errors</h3>\n\n<pre><code class=\"language-bash\">myfunc() {\n  return 1\n}\n</code></pre>\n\n<pre><code class=\"language-bash\">if myfunc; then\n  echo \"success\"\nelse\n  echo \"failure\"\nfi\n</code></pre>\n\n<h3 id=\"arguments\">Arguments</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>$#</code></td>\n      <td>Number of arguments</td>\n    </tr>\n    <tr>\n      <td><code>$*</code></td>\n      <td>All arguments</td>\n    </tr>\n    <tr>\n      <td><code>$@</code></td>\n      <td>All arguments, starting from first</td>\n    </tr>\n    <tr>\n      <td><code>$1</code></td>\n      <td>First argument</td>\n    </tr>\n    <tr>\n      <td><code>$_</code></td>\n      <td>Last argument of the previous command</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See <a href=\"http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables\">Special parameters</a>.</p>\n\n<h2 class=\"-three-column\" id=\"conditionals\">Conditionals</h2>\n\n<h3 id=\"conditions\">Conditions</h3>\n\n<p>Note that <code>[[</code> is actually a command/program that returns either <code>0</code> (true) or <code>1</code> (false). Any program that obeys the same logic (like all base utils, such as <code>grep(1)</code> or <code>ping(1)</code>) can be used as condition, see examples.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Condition</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>[[ -z STRING ]]</code></td>\n      <td>Empty string</td>\n    </tr>\n    <tr>\n      <td><code>[[ -n STRING ]]</code></td>\n      <td>Not empty string</td>\n    </tr>\n    <tr>\n      <td><code>[[ STRING == STRING ]]</code></td>\n      <td>Equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ STRING != STRING ]]</code></td>\n      <td>Not Equal</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ NUM -eq NUM ]]</code></td>\n      <td>Equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -ne NUM ]]</code></td>\n      <td>Not equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -lt NUM ]]</code></td>\n      <td>Less than</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -le NUM ]]</code></td>\n      <td>Less than or equal</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -gt NUM ]]</code></td>\n      <td>Greater than</td>\n    </tr>\n    <tr>\n      <td><code>[[ NUM -ge NUM ]]</code></td>\n      <td>Greater than or equal</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ STRING =~ STRING ]]</code></td>\n      <td>Regexp</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>(( NUM &lt; NUM ))</code></td>\n      <td>Numeric conditions</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"more-conditions\">More conditions</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th>Condition</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>[[ -o noclobber ]]</code></td>\n      <td>If OPTIONNAME is enabled</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ ! EXPR ]]</code></td>\n      <td>Not</td>\n    </tr>\n    <tr>\n      <td><code>[[ X &amp;&amp; Y ]]</code></td>\n      <td>And</td>\n    </tr>\n    <tr>\n      <td><code>[[ X || Y ]]</code></td>\n      <td>Or</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"file-conditions\">File conditions</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Condition</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>[[ -e FILE ]]</code></td>\n      <td>Exists</td>\n    </tr>\n    <tr>\n      <td><code>[[ -r FILE ]]</code></td>\n      <td>Readable</td>\n    </tr>\n    <tr>\n      <td><code>[[ -h FILE ]]</code></td>\n      <td>Symlink</td>\n    </tr>\n    <tr>\n      <td><code>[[ -d FILE ]]</code></td>\n      <td>Directory</td>\n    </tr>\n    <tr>\n      <td><code>[[ -w FILE ]]</code></td>\n      <td>Writable</td>\n    </tr>\n    <tr>\n      <td><code>[[ -s FILE ]]</code></td>\n      <td>Size is &gt; 0 bytes</td>\n    </tr>\n    <tr>\n      <td><code>[[ -f FILE ]]</code></td>\n      <td>File</td>\n    </tr>\n    <tr>\n      <td><code>[[ -x FILE ]]</code></td>\n      <td>Executable</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>[[ FILE1 -nt FILE2 ]]</code></td>\n      <td>1 is more recent than 2</td>\n    </tr>\n    <tr>\n      <td><code>[[ FILE1 -ot FILE2 ]]</code></td>\n      <td>2 is more recent than 1</td>\n    </tr>\n    <tr>\n      <td><code>[[ FILE1 -ef FILE2 ]]</code></td>\n      <td>Same files</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"example-1\">Example</h3>\n\n<pre><code class=\"language-bash\"># String\nif [[ -z \"$string\" ]]; then\n  echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n  echo \"String is not empty\"\nelse\n  echo \"This never happens\"\nfi\n</code></pre>\n\n<pre><code class=\"language-bash\"># Combinations\nif [[ X &amp;&amp; Y ]]; then\n  ...\nfi\n</code></pre>\n\n<pre><code class=\"language-bash\"># Equal\nif [[ \"$A\" == \"$B\" ]]\n</code></pre>\n\n<pre><code class=\"language-bash\"># Regex\nif [[ \"A\" =~ . ]]\n</code></pre>\n\n<pre><code class=\"language-bash\">if (( $a &lt; $b )); then\n   echo \"$a is smaller than $b\"\nfi\n</code></pre>\n\n<pre><code class=\"language-bash\">if [[ -e \"file.txt\" ]]; then\n  echo \"file exists\"\nfi\n</code></pre>\n\n<h2 id=\"arrays\">Arrays</h2>\n\n<h3 id=\"defining-arrays\">Defining arrays</h3>\n\n<pre><code class=\"language-bash\">Fruits=('Apple' 'Banana' 'Orange')\n</code></pre>\n\n<pre><code class=\"language-bash\">Fruits[0]=\"Apple\"\nFruits[1]=\"Banana\"\nFruits[2]=\"Orange\"\n</code></pre>\n\n<h3 id=\"working-with-arrays\">Working with arrays</h3>\n\n<pre><code class=\"language-bash\">echo ${Fruits[0]}           # Element #0\necho ${Fruits[-1]}          # Last element\necho ${Fruits[@]}           # All elements, space-separated\necho ${#Fruits[@]}          # Number of elements\necho ${#Fruits}             # String length of the 1st element\necho ${#Fruits[3]}          # String length of the Nth element\necho ${Fruits[@]:3:2}       # Range (from position 3, length 2)\necho ${!Fruits[@]}          # Keys of all elements, space-separated\n</code></pre>\n\n<h3 id=\"operations\">Operations</h3>\n\n<pre><code class=\"language-bash\">Fruits=(\"${Fruits[@]}\" \"Watermelon\")    # Push\nFruits+=('Watermelon')                  # Also Push\nFruits=( ${Fruits[@]/Ap*/} )            # Remove by regex match\nunset Fruits[2]                         # Remove one item\nFruits=(\"${Fruits[@]}\")                 # Duplicate\nFruits=(\"${Fruits[@]}\" \"${Veggies[@]}\") # Concatenate\nlines=(`cat \"logfile\"`)                 # Read from file\n</code></pre>\n\n<h3 id=\"iteration\">Iteration</h3>\n\n<pre><code class=\"language-bash\">for i in \"${arrayName[@]}\"; do\n  echo $i\ndone\n</code></pre>\n\n<h2 class=\"-three-column\" id=\"dictionaries\">Dictionaries</h2>\n\n<h3 id=\"defining\">Defining</h3>\n\n<pre><code class=\"language-bash\">declare -A sounds\n</code></pre>\n\n<pre><code class=\"language-bash\">sounds[dog]=\"bark\"\nsounds[cow]=\"moo\"\nsounds[bird]=\"tweet\"\nsounds[wolf]=\"howl\"\n</code></pre>\n\n<p>Declares <code>sound</code> as a Dictionary object (aka associative array).</p>\n\n<h3 id=\"working-with-dictionaries\">Working with dictionaries</h3>\n\n<pre><code class=\"language-bash\">echo ${sounds[dog]} # Dog's sound\necho ${sounds[@]}   # All values\necho ${!sounds[@]}  # All keys\necho ${#sounds[@]}  # Number of elements\nunset sounds[dog]   # Delete dog\n</code></pre>\n\n<h3 id=\"iteration-1\">Iteration</h3>\n\n<h4 id=\"iterate-over-values\">Iterate over values</h4>\n\n<pre><code class=\"language-bash\">for val in \"${sounds[@]}\"; do\n  echo $val\ndone\n</code></pre>\n\n<h4 id=\"iterate-over-keys\">Iterate over keys</h4>\n\n<pre><code class=\"language-bash\">for key in \"${!sounds[@]}\"; do\n  echo $key\ndone\n</code></pre>\n\n<h2 id=\"options\">Options</h2>\n\n<h3 id=\"options-1\">Options</h3>\n\n<pre><code class=\"language-bash\">set -o noclobber  # Avoid overlay files (echo \"hi\" &gt; foo)\nset -o errexit    # Used to exit upon error, avoiding cascading errors\nset -o pipefail   # Unveils hidden failures\nset -o nounset    # Exposes unset variables\n</code></pre>\n\n<h3 id=\"glob-options\">Glob options</h3>\n\n<pre><code class=\"language-bash\">shopt -s nullglob    # Non-matching globs are removed  ('*.foo' =&gt; '')\nshopt -s failglob    # Non-matching globs throw errors\nshopt -s nocaseglob  # Case insensitive globs\nshopt -s dotglob     # Wildcards match dotfiles (\"*.sh\" =&gt; \".foo.sh\")\nshopt -s globstar    # Allow ** for recursive matches ('lib/**/*.rb' =&gt; 'lib/a/b/c.rb')\n</code></pre>\n\n<p>Set <code>GLOBIGNORE</code> as a colon-separated list of patterns to be removed from glob\nmatches.</p>\n\n<h2 id=\"history\">History</h2>\n\n<h3 id=\"commands\">Commands</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>history</code></td>\n      <td>Show history</td>\n    </tr>\n    <tr>\n      <td><code>shopt -s histverify</code></td>\n      <td>Don’t execute expanded result immediately</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"expansions\">Expansions</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>!$</code></td>\n      <td>Expand last parameter of most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!*</code></td>\n      <td>Expand all parameters of most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!-n</code></td>\n      <td>Expand <code>n</code>th most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!n</code></td>\n      <td>Expand <code>n</code>th command in history</td>\n    </tr>\n    <tr>\n      <td><code>!&lt;command&gt;</code></td>\n      <td>Expand most recent invocation of command <code>&lt;command&gt;</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"operations-1\">Operations</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Code</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>!!</code></td>\n      <td>Execute last command again</td>\n    </tr>\n    <tr>\n      <td><code>!!:s/&lt;FROM&gt;/&lt;TO&gt;/</code></td>\n      <td>Replace first occurrence of <code>&lt;FROM&gt;</code> to <code>&lt;TO&gt;</code> in most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!!:gs/&lt;FROM&gt;/&lt;TO&gt;/</code></td>\n      <td>Replace all occurrences of <code>&lt;FROM&gt;</code> to <code>&lt;TO&gt;</code> in most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!$:t</code></td>\n      <td>Expand only basename from last parameter of most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!$:h</code></td>\n      <td>Expand only directory from last parameter of most recent command</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code>!!</code> and <code>!$</code> can be replaced with any valid expansion.</p>\n\n<h3 id=\"slices\">Slices</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Code</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>!!:n</code></td>\n      <td>Expand only <code>n</code>th token from most recent command (command is <code>0</code>; first argument is <code>1</code>)</td>\n    </tr>\n    <tr>\n      <td><code>!^</code></td>\n      <td>Expand first argument from most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!$</code></td>\n      <td>Expand last token from most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!!:n-m</code></td>\n      <td>Expand range of tokens from most recent command</td>\n    </tr>\n    <tr>\n      <td><code>!!:n-$</code></td>\n      <td>Expand <code>n</code>th token to last from most recent command</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code>!!</code> can be replaced with any valid expansion i.e. <code>!cat</code>, <code>!-2</code>, <code>!42</code>, etc.</p>\n\n<h2 id=\"miscellaneous\">Miscellaneous</h2>\n\n<h3 id=\"numeric-calculations\">Numeric calculations</h3>\n\n<pre><code class=\"language-bash\">$((a + 200))      # Add 200 to $a\n</code></pre>\n\n<pre><code class=\"language-bash\">$(($RANDOM%200))  # Random number 0..199\n</code></pre>\n\n<h3 id=\"subshells\">Subshells</h3>\n\n<pre><code class=\"language-bash\">(cd somedir; echo \"I'm now in $PWD\")\npwd # still in first directory\n</code></pre>\n\n<h3 id=\"redirection\">Redirection</h3>\n\n<pre><code class=\"language-bash\">python hello.py &gt; output.txt   # stdout to (file)\npython hello.py &gt;&gt; output.txt  # stdout to (file), append\npython hello.py 2&gt; error.log   # stderr to (file)\npython hello.py 2&gt;&amp;1           # stderr to stdout\npython hello.py 2&gt;/dev/null    # stderr to (null)\npython hello.py &amp;&gt;/dev/null    # stdout and stderr to (null)\n</code></pre>\n\n<pre><code class=\"language-bash\">python hello.py &lt; foo.txt      # feed foo.txt to stdin for python\n</code></pre>\n\n<h3 id=\"inspecting-commands\">Inspecting commands</h3>\n\n<pre><code class=\"language-bash\">command -V cd\n#=&gt; \"cd is a function/alias/whatever\"\n</code></pre>\n\n<h3 id=\"trap-errors\">Trap errors</h3>\n\n<pre><code class=\"language-bash\">trap 'echo Error at about $LINENO' ERR\n</code></pre>\n\n<p>or</p>\n\n<pre><code class=\"language-bash\">traperr() {\n  echo \"ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}\"\n}\n\nset -o errtrace\ntrap traperr ERR\n</code></pre>\n\n<h3 id=\"caseswitch\">Case/switch</h3>\n\n<pre><code class=\"language-bash\">case \"$1\" in\n  start | up)\n    vagrant up\n    ;;\n\n  *)\n    echo \"Usage: $0 {start|stop|ssh}\"\n    ;;\nesac\n</code></pre>\n\n<h3 id=\"source-relative\">Source relative</h3>\n\n<pre><code class=\"language-bash\">source \"${0%/*}/../share/foo.sh\"\n</code></pre>\n\n<h3 id=\"printf\">printf</h3>\n\n<pre><code class=\"language-bash\">printf \"Hello %s, I'm %s\" Sven Olga\n#=&gt; \"Hello Sven, I'm Olga\n\nprintf \"1 + 1 = %d\" 2\n#=&gt; \"1 + 1 = 2\"\n\nprintf \"This is how you print a float: %f\" 2\n#=&gt; \"This is how you print a float: 2.000000\"\n</code></pre>\n\n<h3 id=\"directory-of-script\">Directory of script</h3>\n\n<pre><code class=\"language-bash\">DIR=\"${0%/*}\"\n</code></pre>\n\n<h3 id=\"getting-options\">Getting options</h3>\n\n<pre><code class=\"language-bash\">while [[ \"$1\" =~ ^- &amp;&amp; ! \"$1\" == \"--\" ]]; do case $1 in\n  -V | --version )\n    echo $version\n    exit\n    ;;\n  -s | --string )\n    shift; string=$1\n    ;;\n  -f | --flag )\n    flag=1\n    ;;\nesac; shift; done\nif [[ \"$1\" == '--' ]]; then shift; fi\n</code></pre>\n\n<h3 id=\"heredoc\">Heredoc</h3>\n\n<pre><code class=\"language-sh\">cat &lt;&lt;END\nhello world\nEND\n</code></pre>\n\n<h3 id=\"reading-input\">Reading input</h3>\n\n<pre><code class=\"language-bash\">echo -n \"Proceed? [y/n]: \"\nread ans\necho $ans\n</code></pre>\n\n<pre><code class=\"language-bash\">read -n 1 ans    # Just one character\n</code></pre>\n\n<h3 id=\"special-variables\">Special variables</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>$?</code></td>\n      <td>Exit status of last task</td>\n    </tr>\n    <tr>\n      <td><code>$!</code></td>\n      <td>PID of last background task</td>\n    </tr>\n    <tr>\n      <td><code>$$</code></td>\n      <td>PID of shell</td>\n    </tr>\n    <tr>\n      <td><code>$0</code></td>\n      <td>Filename of the shell script</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See <a href=\"http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables\">Special parameters</a>.</p>\n\n<h3 id=\"go-to-previous-directory\">Go to previous directory</h3>\n\n<pre><code class=\"language-bash\">pwd # /home/user/foo\ncd bar/\npwd # /home/user/foo/bar\ncd -\npwd # /home/user/foo\n</code></pre>\n\n<h3 id=\"check-for-commands-result\">Check for command’s result</h3>\n\n<pre><code class=\"language-bash\">if ping -c 1 google.com; then\n  echo \"It appears you have a working internet connection\"\nfi\n</code></pre>\n\n<h3 id=\"grep-check\">Grep check</h3>\n\n<pre><code class=\"language-bash\">if grep -q 'foo' ~/.bash_history; then\n  echo \"You appear to have typed 'foo' in the past\"\nfi\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"http://wiki.bash-hackers.org/\">Bash-hackers wiki</a> <em>(bash-hackers.org)</em></li>\n  <li><a href=\"http://wiki.bash-hackers.org/syntax/shellvars\">Shell vars</a> <em>(bash-hackers.org)</em></li>\n  <li><a href=\"https://learnxinyminutes.com/docs/bash/\">Learn bash in y minutes</a> <em>(learnxinyminutes.com)</em></li>\n  <li><a href=\"http://mywiki.wooledge.org/BashGuide\">Bash Guide</a> <em>(mywiki.wooledge.org)</em></li>\n  <li><a href=\"https://www.shellcheck.net/\">ShellCheck</a> <em>(shellcheck.net)</em></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "wip/intl-datetime",
  "title": "Intl.DateTimeFormat",
  "url": "/wip/intl-datetime",
  "category": "Hidden",
  "keywords": null,
  "content_html": "<h3 id=\"parsing\">Parsing</h3>\n\n<h4 id=\"as-local-time\">As local time</h4>\n\n<pre><code class=\"language-js\">const date = new Date(2012, 11, 20, 3, 0, 0)\n</code></pre>\n\n<h4 id=\"as-utc-time\">As UTC time</h4>\n\n<pre><code class=\"language-js\">const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0))\n</code></pre>\n\n<h4 id=\"from-iso-strings\">From ISO strings</h4>\n\n<pre><code class=\"language-js\">const date = new Date('2018-04-20T12:00:00Z')\n</code></pre>\n\n<p>Note that JavaScript doesn’t “store” timezones in a date object. All these date objects, when expressed via <code>.toString()</code> or similar, will show the local timezone of the browser, regardless if you parsed UTC dates.</p>\n\n<h3 id=\"formatting-dates\">Formatting dates</h3>\n\n<h4 id=\"default-formatting\">Default formatting</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat().format(date))\n// → '12/19/2012' (assuming America/Los_Angeles)\n</code></pre>\n\n<h4 id=\"custom-locale\">Custom locale</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('en-GB').format(date))\n// → '19/12/2012' (date-first)\n</code></pre>\n\n<h4 id=\"custom-timezone\">Custom timezone</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('en-AU', {\n  timeZone: 'Australia/Sydney'\n}).format(date))\n// → '19/12/2012'\n</code></pre>\n\n<h3 id=\"custom-formats\">Custom formats</h3>\n\n<h4 id=\"time\">Time</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('default', {\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric'\n}).format(date))\n// → '2:00:00 pm'\n</code></pre>\n\n<h4 id=\"date\">Date</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric'\n}).format(date))\n// → '12/19/2012'\n</code></pre>\n\n<p>To specify options without a locale, use <code>'default'</code> as a locale.</p>\n\n<h3 id=\"all-options\">All options</h3>\n\n<pre><code class=\"language-js\">{\n  weekday: 'narrow' | 'short' | 'long',\n  era: 'narrow' | 'short' | 'long',\n  year: 'numeric' | '2-digit',\n  month: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long',\n  day: 'numeric' | '2-digit',\n  hour: 'numeric' | '2-digit',\n  minute: 'numeric' | '2-digit',\n  second: 'numeric' | '2-digit',\n  timeZoneName: 'short' | 'long',\n\n  // Time zone to express it in\n  timeZone: 'Asia/Shanghai',\n  // Force 12-hour or 24-hour\n  hour12: true | false,\n\n  // Rarely-used options\n  hourCycle: 'h11' | 'h12' | 'h23' | 'h24',\n  formatMatcher: 'basic' | 'best fit'\n}\n</code></pre>\n\n<h2 id=\"references\">References</h2>\n\n<ul>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat</a></li>\n</ul>",
  "intro_html": "<p><code>Intl.DateTimeFormat</code> is used to format date strings in JavaScript.</p>",
  "description_html": "",
  "tags": ["WIP"],
  "updated": null
},{
  "id": "kgraft",
  "title": "kGraft Live Patching for SLES12",
  "url": "/kgraft",
  "category": "Live-Patching",
  "keywords": ["live Patching","SLES SAP","kgraft","kgr"],
  "content_html": "<h3 id=\"kgr-tool---query-and-manipulate-kgraft-patching-status\">kgr Tool - query and manipulate kGraft patching status</h3>\n<p>Display the overall status of kGraft patching (ready or in_progress)</p>\n<pre><code class=\"language-bash\">$ kgr status\n## Example output\nready\n</code></pre>\n<p>Display the list of loaded kGraft patches</p>\n<pre><code class=\"language-bash\">$ kgr -v patches\n## Example Output\nkgraft_patch_1_8_5_1\n    active: 1\n    RPM: kgraft-patch-4_12_14-122_46-default-1-8.5.1.x86_64\n    CVE: (none - this is an initial kGraft patch)\n    bug fixes and enhancements: (none)\n</code></pre>\n\n<p>List processes that are preventing kGraft patching from finishing. \nBy default, only the PIDs are listed</p>\n<pre><code class=\"language-bash\">$ kgr -v blocking\n## Example Output\nno processes with kgr_in_progress set\n</code></pre>\n\n<p>Show man page</p>\n<pre><code class=\"language-bash\">$ man kgr\n</code></pre>\n\n<h3 id=\"how-does-kgraft-work\">How Does kGraft Work?</h3>\n<p><img src=\"/images/kgraft1.png\" alt=\"\" /></p>\n\n<h3 id=\"patch-lifecycle\">Patch Lifecycle</h3>\n<p>Display expiration dates of live patches</p>\n<pre><code class=\"language-bash\">$ zypper lifecycle\n\n## Example Output\nProduct end of support\nCodestream: SUSE Linux Enterprise Server 12             2024-10-30\n    SUSE Linux Enterprise Server for SAP Applications 12 SP5 2024-10-30\n\nExtension end of support\nSUSE Linux Enterprise Live Patching                     2024-10-30\n\nkernel-default                           Now, installed 4.12.14-122.46.1, update available 4.12.14-122.54.1\n</code></pre>\n<p>Display if there are live patches available</p>\n<pre><code class=\"language-bash\">$ zypper lifecycle | grep kgraft\n\n## Example Output showing an available update\nkgraft-patch-4_12_14-122_46-default      Now, installed 1-8.5.1, update available 2-2.1 2024-10-30\n</code></pre>\n\n<h3 id=\"installing-and-removing-patches\">Installing and Removing Patches</h3>\n<p>Display Available kGraft Patch</p>\n<pre><code class=\"language-bash\">$ zypper lp | grep -i 'Live Patch'\n\n### Example Output\nSLE-Live-Patching12-SP5-Updates for x86_64 SAP        | SUSE-SLE-Live-Patching-12-SP5-2020-3674    | security | important | ---         | needed | important: Security update for the Linux Kernel (Live Patch 11 for SLE 12 SP5)\n</code></pre>\n<p>Install kGraft Patch</p>\n<pre><code class=\"language-bash\">$ zypper update -t patch &lt;PATCH_NAME&gt;\n\n### Example and Output\n$ zypper update -t patch SUSE-SLE-Live-Patching-12-SP5-2020-3674\n\nThe following NEW patch is going to be installed:\n  SUSE-SLE-Live-Patching-12-SP5-2020-3674\n\nThe following package is going to be upgraded:\n  kgraft-patch-4_12_14-122_46-default\n</code></pre>\n<p>Remove kGraft Patch</p>\n<pre><code class=\"language-bash\">$ zypper rm kgraft-patch*\n\n## Reboot\n$ reboot\n</code></pre>\n\n<h3 class=\"-intro\" id=\"documentation\">Documentation</h3>\n<p>SUSE Documentation</p>\n<ul>\n  <li><a href=\"https://documentation.suse.com/sles/12-SP5/html/SLES-kgraft/index.html\">Live Kernel Patching Using kGraft</a> <em>(suse.com)</em></li>\n  <li><a href=\"https://www.suse.com/c/reboot-reloaded-patching-the-linux-kernel-online/\">Reboot Reloaded: Patching the Linux Kernel Online</a> <em>(suse.com)</em></li>\n  <li><a href=\"https://www.suse.com/media/presentation/slelp.pdf\">Live Patching Presentation</a> <em>(suse.com)</em></li>\n  <li><a href=\"https://www.suse.com/media/data-sheet/sle_live_patching_data_sheet.pdf\">Live Patching Data Sheet</a> <em>(suse.com)</em></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2021-01-06"
},{
  "id": "wip/php",
  "title": "PHP",
  "url": "/wip/php",
  "category": "PHP",
  "keywords": null,
  "content_html": "<h3 id=\"hello-world\">Hello world</h3>\n\n<h4 id=\"hellophp\">hello.php</h4>\n\n<pre><code class=\"language-php\">&lt;?php\nfunction greetMe($name): string\n{\n    return \"Hello, \" . $name . \"!\";\n}\n\n$message = greetMe($name);\necho $message;\n</code></pre>\n\n<p>All PHP files start with <code>&lt;?php</code>.</p>\n\n<p>See: <a href=\"https://php.net/manual/en/language.basic-syntax.phptags.php\">PHP tags</a></p>\n\n<h3 id=\"objects\">Objects</h3>\n\n<pre><code class=\"language-php\">&lt;?php\n\n$fruitsArray = array(\n    \"apple\" =&gt; 20,\n    \"banana\" =&gt; 30\n);\necho $fruitsArray['banana'];\n</code></pre>\n\n<p>Or cast as object</p>\n\n<pre><code class=\"language-php\">&lt;?php\n\n$fruitsObject = (object) $fruits;\necho $fruitsObject-&gt;banana;\n</code></pre>\n\n<h3 id=\"inspecting-objects\">Inspecting objects</h3>\n\n<pre><code class=\"language-php\">&lt;?php\nvar_dump($object)\n</code></pre>\n\n<p>Prints the contents of a variable for inspection.</p>\n\n<p>See: <a href=\"https://php.net/var_dump\">var_dump</a></p>\n\n<h3 id=\"classes\">Classes</h3>\n\n<pre><code class=\"language-php\">class Person\n{\n    public $name = '';\n}\n\n$person = new Person();\n$person-&gt;name = 'bob';\n\necho $person-&gt;name;\n</code></pre>\n\n<h3 id=\"getters-and-setters\">Getters and setters</h3>\n\n<pre><code class=\"language-php\">class Person \n{\n    private $name = '';\n\n    public function getName(): string\n    {\n        return $this-&gt;name;\n    }\n\n    public function setName(string $name)\n    {\n        $this-&gt;name = $name;\n        return $this;\n    }\n}\n\n$person = new Person();\n$person-&gt;setName('bob');\n\necho $person-&gt;getName();\n</code></pre>\n\n<h3 id=\"isset-vs-empty\">isset vs empty</h3>\n<pre><code class=\"language-php\">\n$options = [\n    'key' =&gt; 'value',\n    'blank' =&gt; '',\n    'nothing' =&gt; null,\n];\n\nvar_dump(isset($options['key']), empty($options['key'])); // true, false\nvar_dump(isset($options['blank']), empty($options['blank'])); // true, true\nvar_dump(isset($options['nothing']), empty($options['nothing'])); // false, true\n</code></pre>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "assets/css/style.css",
  "title": null,
  "url": "/assets/css/style.css",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>@import “jekyll-theme-primer”;</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "redirects.json",
  "title": null,
  "url": "/redirects.json",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>{}</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
}
]

